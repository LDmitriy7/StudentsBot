"""–í—Å–µ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞: —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ."""
from aiogram import types
from aiogram.dispatcher import FSMContext

from functions.common import get_file_obj
from functions.create_post import add_post_keyboard, handle_calendar_callback
from functions.personal_project import send_project
from keyboards import inline_kb, markup
from loader import calendar, dp, users_db
from questions.misc import HandleException
from questions.personal_project import PersonalProjectConv


@dp.message_handler(text='–õ–∏—á–Ω—ã–π –ø—Ä–æ–µ–∫—Ç ü§ù')
async def entry_create_post(msg: types.Message):
    return PersonalProjectConv, {'status': '–ê–∫—Ç–∏–≤–µ–Ω'}


@dp.callback_query_handler(text=inline_kb.work_type_btns, state=PersonalProjectConv.work_type)
async def process_work_type(query: types.CallbackQuery):
    await query.answer()
    return {'work_type': query.data}


@dp.message_handler(state=PersonalProjectConv.subject)
async def process_subject(msg: types.Message):
    return {'subject': msg.text}


@dp.callback_query_handler(calendar.filter(), state=PersonalProjectConv.date)
async def process_date(query: types.CallbackQuery, callback_data: dict):
    result = await handle_calendar_callback(query, callback_data)

    if isinstance(result, HandleException):
        return result  # —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ

    await query.answer(f'–í—ã–±—Ä–∞–Ω–æ: {result}')
    return {'date': str(result)}


@dp.message_handler(state=PersonalProjectConv.description)
async def process_description(msg: types.Message):
    description = msg.text

    MIN_LEN, MAX_LEN = 15, 500

    if MIN_LEN < len(description) < MAX_LEN:
        return {'description': description}

    return HandleException(f'–û—à–∏–±–∫–∞, –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç {MIN_LEN} –¥–æ {MAX_LEN} —Å–∏–º–≤–æ–ª–æ–≤')


@dp.message_handler(state=PersonalProjectConv.price)
async def process_price(msg: types.Message):
    if msg.text == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        price = None
    elif msg.text.isdigit():
        price = int(msg.text)
    else:
        return HandleException('–û—à–∏–±–∫–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ')

    return {'price': price}


@dp.message_handler(state=PersonalProjectConv.note)
async def process_note(msg: types.Message):
    note = None if msg.text == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' else msg.text
    return {'note': note}


@dp.message_handler(content_types=['photo', 'document'], state=PersonalProjectConv.files)
async def process_file(msg: types.Message):
    file_obj = get_file_obj(msg)
    return {'files': [file_obj]}, HandleException()


@dp.message_handler(text=['–ì–æ—Ç–æ–≤–æ', '–°–±—Ä–æ—Å–∏—Ç—å –≤—ã–±–æ—Ä'], state=PersonalProjectConv.files)
async def process_file_finish(msg: types.Message):
    if msg.text == '–°–±—Ä–æ—Å–∏—Ç—å –≤—ã–±–æ—Ä':
        return {'files': []}, HandleException('–¢–µ–ø–µ—Ä—å –≤—ã–±–∏—Ä–∞–π—Ç–µ –∑–∞–Ω–æ–≤–æ')


@dp.message_handler(state=PersonalProjectConv.worker)
async def process_worker(msg: types.Message):
    if msg.text.isdigit():
        worker = int(msg.text)
        if 10 ** 5 < worker < 10 ** 15:
            return {'worker': worker}
    return HandleException('–ù–µ–≤–µ—Ä–Ω—ã–π ID, –ø–æ–ø—Ä–æ—Å–∏—Ç–µ ID —É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è')


@dp.message_handler(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç', state=PersonalProjectConv.confirm)
async def exit_create_post(msg: types.Message, state: FSMContext):
    result = await send_project(msg, state)  # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    if isinstance(result, HandleException):  # —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        return result

    worker, post_msg, post_data = result
    project_id = await users_db.add_project(msg.from_user.id, post_data)  # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    has_files = bool(post_data.get('files'))
    await add_post_keyboard(post_msg, project_id, has_files)

    text1 = '–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω'
    await msg.answer(text1, reply_markup=markup.main_kb)
    await state.finish()  # finish conversation in any case
