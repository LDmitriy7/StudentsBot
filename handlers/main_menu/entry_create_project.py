"""–í—Å–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ –∫–∞–Ω–∞–ª/–ª–∏—á–Ω–æ/—Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ."""
from aiogram import types
from aiogram.contrib.middlewares.conversation import UpdateData

import functions as funcs
import texts
from data_types import Prefixes, SendTo, TextQueries
from filters import DeepLinkPrefix
from keyboards import inline_plain
from keyboards.inline_plain import UserRolesKeyboard
from loader import dp, users_db
from questions import CreateProjectConv, RegistrationConv


@dp.message_handler(text='–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç ‚ûï')
async def entry_create_post(msg: types.Message):
    return UpdateData({'send_to': SendTo.CHANNEL}, new_state=CreateProjectConv)


@dp.message_handler(text='–õ–∏—á–Ω—ã–π –ø—Ä–æ–µ–∫—Ç ü§ù')
async def ask_user_role(msg: types.Message):
    await msg.answer(texts.start_personal_project, reply_markup=UserRolesKeyboard())


@dp.callback_query_handler(text=UserRolesKeyboard.WORKER)
async def send_invite_project_keyboard(query: types.CallbackQuery):
    account = await users_db.get_account_by_id(query.from_user.id)
    if account and account.profile:
        text = '–í—ã–±–µ—Ä–∏—Ç–µ <b>–∑–∞–∫–∞–∑—á–∏–∫–∞</b> –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–≤–æ–∏—Ö —á–∞—Ç–æ–≤'
        keyboard = inline_plain.invite_project
        await query.message.edit_text(text, reply_markup=keyboard)
    else:
        await query.message.edit_text('–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
        return UpdateData(new_state=RegistrationConv)


@dp.inline_handler(text=TextQueries.INVITE_PROJECT)
async def send_project_invite_to_client(query: types.InlineQuery):
    article = await funcs.form_invite_project_article()
    await query.answer([article], cache_time=0, is_personal=True)


@dp.callback_query_handler(text=UserRolesKeyboard.CLIENT)
async def entry_personal_project(query: types.CallbackQuery):
    await query.message.edit_text('–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç')
    return UpdateData({'send_to': None}, new_state=CreateProjectConv)


@dp.message_handler(DeepLinkPrefix(Prefixes.INVITE_PROJECT_))
async def entry_personal_project_with_worker(msg: types.Message, payload: str):
    worker_id = int(payload)
    if msg.from_user.id == worker_id:
        return '<b>–í—ã —Å–∞–º–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–µ–∫—Ç</b>'
    return UpdateData({'worker_id': worker_id, 'send_to': SendTo.WORKER}, new_state=CreateProjectConv)
