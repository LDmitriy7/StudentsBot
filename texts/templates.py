"""–°–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤ –ø–æ —à–∞–±–ª–æ–Ω–∞–º."""

from copy import deepcopy
from dataclasses import asdict

from data_types import data_models

_POST_TEMPLATE = """
<b>{status}</b>

#{work_type}
#{subject}

{description}

<b>–°–¥–∞—á–∞:</b> {date}
<b>–¶–µ–Ω–∞:</b> {price}
{note}
"""

_AVG_RATING_TEMPLATE = """\
–ö–∞—á–µ—Å—Ç–≤–æ: {quality_text} ({quality:.2f})
–°—Ä–æ–∫–∏: {terms_text} ({terms:.2f})
–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ—Å—Ç—å: {contact_text} ({contact:.2f})\
"""

_WORKER_BID_TEMPLATE = """
<a href="{post_url}">&#8203;</a>\
–ê–≤—Ç–æ—Ä <a href="{worker_url}">{worker_nickname}</a> –æ—Ç–∫–ª–∏–Ω–∫—É–ª—Å—è –Ω–∞ –≤–∞—à –ø—Ä–æ–µ–∫—Ç:

<b>–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥</b>:
{avg_rating}

<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</b>:
{bid_text}
"""

_CLIENT_BID_TEMPLATE = """
–ó–∞–∫–∞–∑—á–∏–∫ {client_name} –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç
"""

_PROFILE_TEMPLATE = """
–ù–∏–∫–Ω–µ–π–º: {nickname}
–¢–µ–ª–µ—Ñ–æ–Ω: {phone_number}
Email: {email}

–°—Å—ã–ª–∫–∞ –Ω–∞ –ª–∏—á–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É:
{page_url}
"""


def form_client_bid_text(client_name: str) -> str:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞—è–≤–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞."""
    return _CLIENT_BID_TEMPLATE.format(**locals())


def form_avg_rating_text(rating: dict) -> str:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ —Å—Ä–µ–¥–Ω–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º –ø–æ —à–∞–±–ª–æ–Ω—É."""
    text_rating = {f'{rate}_text': round(amount) * '‚≠ê' for rate, amount in rating.items()}
    return _AVG_RATING_TEMPLATE.format(**rating, **text_rating)


def form_subjects_text(subjects: list) -> str:
    """–°–æ–∑–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ (—Ç–µ–∫—Å—Ç)."""
    title = '<b>–í–∞—à–∏ –ø—Ä–µ–¥–º–µ—Ç—ã:</b>'
    subjects = [f' ‚Ä¢ {s}' for s in subjects]
    result = title + '\n' + '\n'.join(subjects)
    return result


def form_post_text(status: str, post_data: data_models.ProjectData, with_note=False) -> str:
    """Form text for post for channel."""
    post_data = deepcopy(post_data)

    emojis = {'–ê–∫—Ç–∏–≤–µ–Ω': 'üî•', '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è': '‚è≥', '–í—ã–ø–æ–ª–Ω–µ–Ω': '‚úÖ', '–û—Å—Ç–∞–≤–ª–µ–Ω –æ—Ç–∑—ã–≤': '‚úÖ'}
    status = f'{emojis.get(status, "")} {status}'

    post_data.subject = post_data.subject.replace(' ', '_')
    post_data.work_type = post_data.work_type.replace(' ', '_')

    price = post_data.price
    post_data.price = f'{price} –≥—Ä–Ω' if price else '–î–æ–≥–æ–≤–æ—Ä–Ω–∞—è'

    date = post_data.date.split('-')
    post_data.date = f'{date[2]}.{date[1]}'

    note = post_data.note
    post_data.note = f'<b>–í–∞—à–∞ –∑–∞–º–µ—Ç–∫–∞:</b> {note}' if note and with_note else ''

    return _POST_TEMPLATE.format(**asdict(post_data), status=status)


def form_worker_bid_text(worker_nickname: str, worker_url: str, post_url: str, avg_rating: str, bid_text: str) -> str:
    return _WORKER_BID_TEMPLATE.format(**locals())


def form_profile_template(nickname: str, phone_number: str, email: str, page_url: str):
    return _PROFILE_TEMPLATE.format(**locals())
