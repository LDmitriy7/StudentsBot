from telegraph import Telegraph
import asyncio
from typing import List
from collections import namedtuple

access_token = 'be3cb0f4c945f16ca942bec2a979625bcea94e4b342fe639ed7ba7607397'
telegraph = Telegraph(access_token)

BASE_URL = 'https://telegra.ph/'
Review = namedtuple('Review', ['client_name', 'rating', 'text'])

page_template = """
<p><b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫ üìù:</b> {deals_amount}</p>
<p><b>–ü—Ä–µ–¥–º–µ—Ç—ã üìö:</b> {subjects}</p>

<h4>–ë–∏–æ–≥—Ä–∞—Ñ–∏—è üë§:</h4>
<blockquote>{biography}</blockquote>

<h4><b>–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ üåü:</b></h4>
<p>{avg_rating}</p>

<h4>–ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç:</h4>
{html_imgs}

<h3>–û—Ç–∑—ã–≤—ã:</h3>
{reviews}
"""

review_template = """
<aside><b>{client_name}:</b></aside>
<blockquote>{text}</blockquote>

<p>–ö–∞—á–µ—Å—Ç–≤–æ: {quality}</p>
<p>–°—Ä–æ–∫–∏: {terms}</p>
<p>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ—Å—Ç—å: {contact}</p>
"""


def make_html_imgs(photo_urls: List[str]) -> str:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç c html-—Ç–µ–≥–∞–º–∏ <img/>."""
    photo_urls = ''.join([f'<img src="{url}"/>' for url in photo_urls])
    return photo_urls


def make_html_reviews(reviews: List[Review]) -> str:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å html-–æ—Ç–∑—ã–≤–∞–º–∏ –ø–æ —à–∞–±–ª–æ–Ω—É."""
    html_reviews = []
    for review in reviews:
        rating = {key: "‚≠ê" * value for key, value in review.rating.items()}
        new_review = review_template.format(
            client_name=review.client_name,
            text=review.text,
            **rating,
        )
        html_reviews.append(new_review)
    return '<hr/>'.join(html_reviews)


review1 = Review(
    '–ê—Ä—Å–µ–Ω–∏–π –ê–∫–æ–ø–æ–≤',
    {'quality': 4, 'contact': 5, 'terms': 4},
    '–°–ø–∞—Å–∏–±–æ, –≤—Å–µ –≤—ã–ø–æ–ª–Ω–∏–ª –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ, –±—É–¥—É –æ–±—Ä–∞—â–∞—Ç—å—Å—è –µ—â–µ'
)


def make_html_content(deals_amount: int, biography: str, subjects: List[str], works: List[str], reviews: List[Review]):
    avg_rating = 'test'
    subjects = ', '.join(subjects)
    html_imgs = make_html_imgs(works)
    reviews = make_html_reviews(reviews)

    content = page_template.format(
        deals_amount=deals_amount,
        biography=biography,
        subjects=subjects,
        avg_rating=avg_rating,
        html_imgs=html_imgs,
        reviews=reviews,
    )
    return content


# –Ω–∏–∫–Ω–µ–π–º, –±–∏–æ–≥—Ä–∞—Ñ–∏—è, –ø—Ä–µ–¥–º–µ—Ç—ã, –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç, —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç, –æ—Ç–∑—ã–≤—ã + –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫
async def create_page(nickname: str, html_content: str, page_url: str = None):
    request_data = {
        'title': f'–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–≤—Ç–æ—Ä–∞ {nickname}',
        'author_name': '–ë–æ—Ç –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤',
        'author_url': 'https://t.me/test2_test_bot',
        'html_content': html_content
    }

    if page_url:
        page_path = page_url.replace(BASE_URL, '')
        response = telegraph.edit_page(path=page_path, **request_data)
    else:
        response = telegraph.create_page(**request_data)

    link = BASE_URL + response['path']
    return link


files = [
    'https://upload.wikimedia.org/wikipedia/commons/thumb/7/72/Disambig.svg/30px-Disambig.svg.png',
    'https://upload.wikimedia.org/wikipedia/commons/thumb/7/72/Disambig.svg/30px-Disambig.svg.png',
]

page_url = 'Stranica-avtora-Dimka34-02-02-4'
html_content = make_html_content(
    45, '–Ø python-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç, –ø–∏—à—É –±–æ—Ç–æ–≤ –∏ –ø–∞—Ä—Å–µ—Ä—ã –±–æ–ª—å—à–µ 2 –ª–µ—Ç',
    ['–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫', '–û–±—â–∞—è —Ñ–∏–∑–∏–∫–∞', '–£–∫—Ä–∞–∏–Ω—Å–∫–∏–π —è–∑—ã–∫'],
    files, [review1, review1]
)

c = create_page('Dimka34', html_content, page_url=page_url)
r = asyncio.run(c)
print(r)
